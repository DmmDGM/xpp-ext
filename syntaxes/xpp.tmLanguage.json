{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "xpp",
	"patterns": [
		{
			"include": "#root"
		}
	],
	"repository": {
		"bracket.curly": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.begin.xpp"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.end.xpp"
				}
			},
			"name": "meta.bracket.curly.xpp",
			"patterns": [
				{
					"include": "#root"
				}
			]
		},
		"bracket.dollar": {
			"begin": "\\$\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.dollar.begin.xpp"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.dollar.end.xpp"
				}
			},
			"name": "meta.bracket.dollar.xpp",
			"patterns": [
				{
					"include": "#root"
				}
			]
		},
		"bracket.round": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.round.begin.xpp"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.round.end.xpp"
				}
			},
			"name": "meta.bracket.round.xpp",
			"patterns": [
				{
					"include": "#root"
				}
			]
		},
		"comment": {
			"match": "::.*",
			"name": "comment.line.xpp"
		},
		"number": {
			"match": "[+-]?(\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?|\\.\\d+(_\\d+)*)(e[+-]?\\d+(_\\d+)*)?",
			"name": "constant.numeric"
		},
		"operator": {
			"match": "\\b(add|cap|chr|cls|dec|div|ext|flt|func|hlt|idx|if|inc|inp|int|jmp|len|load|lwr|mul|out|pow|prt|rem|rep|ret|rnd|rng|save|set|str|sub|thw|try|upr|whl)\\b",
			"name": "keyword.operator.xpp"
		},
		"root": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#variable.function"
				},
				{
					"include": "#variable.file"
				},
				{
					"include": "#variable.local"
				},
				{
					"include": "#number"
				},
				{
					"include": "#symbol"
				},
				{
					"include": "#bracket.round"
				},
				{
					"include": "#bracket.curly"
				},
				{
					"include": "#string.double"
				},
				{
					"include": "#string.single"
				}
			]
		},
		"string.double": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.double.xpp"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "string.quoted.double.xpp"
				}
			},
			"name": "string.group.double.xpp",
			"patterns": [
				{
					"include": "#bracket.dollar"
				}
			]
		},
		"string.single": {
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.single.xpp"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "string.quoted.single.xpp"
				}
			},
			"name": "string.group.single.xpp",
			"patterns": [
				{
					"include": "#bracket.dollar"
				}
			]
		},
		"symbol": {
			"match": "<|<=|==|!=|>|>=|&&|\\|\\||:|\\\\",
			"name": "punctuation.symbol.xpp"
		},
		"variable.file": {
			"match": "@[a-zA-Z_][a-zA-Z0-9_]*",
			"name": "constant.character.file.xpp"
		},
		"variable.function": {
			"match": "(?<=func\\s+)[a-zA-Z_][a-zA-Z0-9_]*",
			"name": "variable.parameter.function.xpp"
		},
		"variable.local": {
			"match": "[a-zA-Z_][a-zA-Z0-9_]*",
			"name": "variable.other.local.xpp"
		}
	},
	"scopeName": "source.xpp"
}